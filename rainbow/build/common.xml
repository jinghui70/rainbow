<project name="common" basedir=".">

	<property name="src" location="src" />
	<property name="test" location="test" />
	<property name="build" location="${dist}/temp" />
	<property name="dest" value="bundle" />
	<basename property="project" file="${basedir}" />

	<available file="test" type="dir" property="test.present" />

	<path id="compile.classpath">
		<pathelement path="${build}" />
		<fileset dir="../rainbow/lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${root}/lib" />
		<fileset dir="${root}/bundle" />
	</path>

	<target name="init">
		<echo>${project}</echo>
		<delete dir="${build}" />
		<mkdir dir="${build}" />
	</target>

	<target name="compile_deploy" depends="init" description="compile the source ">
		<javac srcdir="${src}" destdir="${build}" encoding="UTF-8" includeAntRuntime="no">
			<classpath refid="compile.classpath" />
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-parameters" />
		</javac>
	</target>

	<target name="build_deploy" depends="compile_deploy">
		<copy todir="${build}">
			<fileset dir="${src}" excludes="**/*.java" />
		</copy>
		<jar jarfile="${root}/${dest}/${project}.jar" basedir="${build}" />
		<delete dir="${build}" />
	</target>

	<target name="compile_dev" depends="init" description="compile the source for development">
		<javac srcdir="${src}" destdir="${build}" encoding="UTF-8" debug="on" includeAntRuntime="no">
			<classpath refid="compile.classpath" />
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-parameters" />
		</javac>
		<copy todir="${build}">
			<fileset dir="${src}" />
		</copy>
	</target>

	<target name="compile_dev_test" depends="compile_dev" if="test.present">
		<javac srcdir="${test}" destdir="${build}" encoding="UTF-8" debug="on" includeAntRuntime="no">
			<classpath refid="compile.classpath" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
		<copy todir="${build}">
			<fileset dir="${test}" />
		</copy>
	</target>

	<!--执行测试用例同时生成junit测试报告和emma代码覆盖率报告-->
	<target name="runjunit" depends="compile_dev_test" if="test.present">
		<junit fork="true" forkmode="once" printsummary="withOutAndErr" errorproperty="test.error" showoutput="on">
			<classpath refid="compile.classpath" />
			<formatter type="xml" />
			<!--执行所有以Test开头的junit测试用例-->
			<test name="${project}.TestSuite" todir="${report}/junit" outfile="${project}.test" haltonfailure="no" />
		</junit>
	</target>

	<target name="build_dev" depends="compile_dev_test" description="build bundle for development">
		<jar jarfile="${root}/${dest}/${project}.jar" basedir="${build}" />
		<delete dir="${build}" />
	</target>

</project>